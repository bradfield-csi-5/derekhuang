#!/usr/bin/env bash

set -euo pipefail

BASE_URL="https://en.wikipedia.org/w/api.php"
PARSE_URL="${BASE_URL}?action=parse&format=json&formatversion=2"
QUERY_URL="${BASE_URL}?action=query&format=json&redirects&formatversion=2&prop=extracts&explaintext"
SEARCH_URL="${BASE_URL}?action=opensearch&limit=1"

script=$(basename "$0")

function usage {
  cat <<EOF
Usage: $script PAGE [SECTION...]

Display summary information from Wikipedia.

Arguments:
  PAGE          Wikipedia page to search for.
  SECTION       Optional. A section on a page to get the summary for.
EOF
  exit 1
}

search=${1:-}
section=${2:-}
if [ -z "$search" ]; then
  usage
fi

function get_page {
  # Search queries always return a 200 with the fourth array element
  # as an array of urls to pages if any exist
  local url
  url=$(curl -s --url-query "search=$search" "$SEARCH_URL" | jq -r '.[3][0]')

  if [ "$url" == "null" ]; then
    echo
    return
  fi

  basename "$url"
}

function get_section_idx {
  local sect=$1
  local sections=$2
  # Normalize sect before comparing
  sect=$(tr "[:upper:]" "[:lower:]" <<< "$sect")
  local i=0
  local IFS=$'\n'
  for s in $(echo "$sections" | jq -r '.[].line' | tr "[:upper:]" "[:lower:]"); do
    (( i++ ))
    if [ "$s" == "$sect" ]; then
      echo $i
      return
    fi
  done
  echo -1
}

function get_sections {
  curl -s --url-query "page=$page" "${PARSE_URL}&prop=sections&redirects" | jq '.parse.sections'
}

function print_summary {
  if [ -n "$section" ]; then
    # Capitalize the first letter of section to search for it in the extract text
    section="$(tr '[:lower:]' '[:upper:]' <<< "${section:0:1}")""${section:1}"
    echo "===== $page > $section ====="
    curl -s --url-query "titles=${page}" "${QUERY_URL}&exsectionformat=plain" | \
      jq -r ".query.pages[0].extract | split(\"\\n${section}\\n\")[1] | split(\".\")[0]"
    echo
    return
  fi

  echo "===== $page ====="
  curl -s --url-query "titles=${page}" "${QUERY_URL}&exintro" | \
  jq -r '.query.pages[0].extract | split(". ") | .[0]'
  echo
}

function print_sections {
  local sects=$1
  if [ -n "$section" ]; then
    echo "===== Subsections ====="
    local IFS=$'\n'
    for s in $(jq -r '.[] | select(.toclevel == 2) | .line' <<< "$sects"); do
      echo "$s"
    done
    return
  fi

  echo "===== Sections ====="
  echo "$sects" | jq -r '.[] | select(.toclevel == 1) | .line'
}

function main {
  page=$(get_page)
  if [ -z "$page" ]; then
    echo "Page not found." >&2
    exit 1
  fi

  sections=$(get_sections)
  if [ -n "$section" ]; then
    si=$(get_section_idx "$section" "$sections")
    if [ "$si" -eq -1 ]; then
      echo "Section '${section}' not found." >&2
      exit 1
    fi
     sections="$(curl -s --url-query "page=$page" "${PARSE_URL}&prop=sections&section=${si}&redirects" | jq '.parse.sections')"
  fi

  print_summary
  print_sections "$sections"
}

main
